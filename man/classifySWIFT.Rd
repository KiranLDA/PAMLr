% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classifySWIFT.R
\name{classifySWIFT}
\alias{classifySWIFT}
\title{Make timetable}
\usage{
classifySWIFT(addTO = PAM_data$pressure, dta = TOclassify,
  method = "hmm", states = 2, availalavariable = c("light",
  "pressure", "acceleration"), ...)
}
\arguments{
\item{addTO}{the data that the classification is added to, because the data is derived from pressure, classically this would be data(swift)$pressure}

\item{dta}{data to be used for the classification, for swifts, this is created by the SOARprep function}

\item{method}{method for classifying data, currently support "hmm" for hidden markov model and "kmeans" for kmeans clustering}

\item{states}{number of states to classify the data into}

\item{availalavariable}{currently supports c("light", "pressure", "acceleration"), but will not work without "light" and "pressure"}

\item{...}{any additional inputs for depmixs4::depmix or or stats::kmeans functions, depending on method selected}
}
\value{
a timetable for when the species was migrating or not
}
\description{
Make timetable
}
\examples{
data(swift)
PAM_data = swift

# have a quick look at the data
quickPLOT(PAM_data, measurements=c("light","pressure","acceleration"))

# from this, we can tell thatlight stopped recording and that the timeseries needs to be cut

# crop the data to get rid of no good periods
start = as.POSIXct("2016-09-01","\%Y-\%m-\%d", tz="UTC")
end = as.POSIXct("2017-04-21","\%Y-\%m-\%d", tz="UTC")
PAM_data = cutPAM(PAM_data, start, end)

backup_options <- options()
options(viewer=NULL) # ensure it is viewed in internet browser
dygraphPAM(dta = PAM_data) # plot
options(backup_options) # restore previous viewer settings

# make sure it looks ok
quickPLOT(PAM_data, measurements=c("light","pressure","acceleration"))

# derive a whole bunch of measures which can be used to classifc the data later

twl = GeoLight::twilightCalc(PAM_data$light$date, PAM_data$light$obs, LightThreshold = 2, ask = F)

TOclassify = SOARprep(dta = PAM_data, availavariable = c("pressure", "acceleration","light"), twl=twl, diff_P=15)
str(TOclassify)
TOclassify = TOclassify[complete.cases(TOclassify),]



test = classifySWIFT(addTO = PAM_data$pressure,
                     dta = TOclassify,
                     method = "hmm", # or kmeans
                     states = 3,
                     availalavariable = c("light", "pressure", "acceleration"))

plot(PAM_data$pressure$date,PAM_data$pressure$obs, col=viridis::viridis(max(test$classification)+1)[test$classification+1],
     type="o",
     pch=16, cex=ifelse(test$classification == test$migration, 0.6, 0) )


}
